# ./docker-compose.yaml

version: '3.9'

services:

    backend:
        env_file:
            - ./.env
        working_dir: /code/backend
        container_name: ${BACKEND_CONTAINER_NAME:-backend}
        build:
            context: ./backend
            dockerfile: ./backend.Dockerfile
            target: ${STAGE:-dev}
        ports:
            - ${BACKEND_EXTERNAL_PORT:-8000}:8000
        volumes:
            - ./backend:/code/backend
        command: >
            bash -c "
            python manage.py collectstatic --noinput &&
            uvicorn backend.asgi:application --host 0.0.0.0 --port 8000 --reload
            "
        networks:
            - app_network
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8000/"]
            interval: 5s
            timeout: 5s
            retries: 20

    celery:
        env_file:
            - ./.env
        working_dir: /code/backend
        container_name: ${CELERY_CONTAINER_NAME:-celery}
        build:
            context: ./backend
            dockerfile: ./backend.Dockerfile
            target: ${STAGE:-dev}
        command: >
            bash -c "
            celery -A backend worker --loglevel=info
            "
        volumes:
            - ./backend:/code/backend
        networks:
            - app_network
        depends_on:
            db:
                condition: service_healthy
            redis:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8000/"]
            interval: 5s
            timeout: 5s
            retries: 20

    celery-beat:
        env_file:
            - ./.env
        working_dir: /code/backend
        container_name: ${CELERY_BEAT_CONTAINER_NAME:-celery-beat}
        build:
            context: ./backend
            dockerfile: ./backend.Dockerfile
            target: ${STAGE:-dev}
        command: >
            bash -c "
            celery -A backend beat --loglevel=info
            "
        volumes:
            - ./backend:/code/backend
        networks:
            - app_network
        depends_on:
            db:
                condition: service_healthy
            redis:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8000/"]
            interval: 5s
            timeout: 5s
            retries: 20

    redis:
        container_name: ${REDIS_CONTAINER_NAME}
        image: redis:7.2.2
        env_file:
            - ./.env
        ports:
            - "${REDIS_EXTERNAL_PORT}:6379"
        networks:
            - app_network
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 5s
            timeout: 5s
            retries: 5

    db:
        image: postgres:${POSTGRES_VERSION:-16.1}
        container_name: ${POSTGRES_CONTAINER_NAME}
        env_file:
            - ./.env
        ports:
            - "${POSTGRES_EXTERNAL_PORT}:5432"
        volumes:
            - postgres_data:/var/lib/postgresql/data/
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER:-postgres}", "-d", "${POSTGRES_DB:-postgres}"]
            interval: 5s
            timeout: 5s
            retries: 5

    proxy:
        env_file:
            - ./.env
        container_name: ${PROXY_CONTAINER_NAME:-proxy}
        image: nginx:alpine
        ports:
            - ${PROXY_EXTERNAL_PORT:-80}:80
        volumes:
            - ./nginx/nginx.conf:/etc/nginx/nginx.conf
        networks:
            - app_network
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:${PROXY_INTERNAL_PORT:-80}/"]
            interval: 5s
            timeout: 5s
            retries: 20
        depends_on:
            backend:
                condition: service_healthy
            frontend:
                condition: service_healthy

    frontend:
        env_file:
            - ./.env
        environment:
            - CHOKIDAR_USEPOLLING=true
            - BASE_URL=${VUE_APP_API_URL}
        working_dir: /code/frontend
        container_name: ${FRONTEND_CONTAINER_NAME:-frontend}
        build:
            context: ./frontend
            dockerfile: ./frontend.Dockerfile
            target: ${STAGE:-dev}
        ports:
            - ${FRONTEND_EXTERNAL_PORT:-3000}:3000
            - "24678:24678"
        volumes:
            - ./frontend:/code/frontend:rw
            - frontend_node_modules:/code/frontend/node_modules
        tmpfs: /tmp
        command: /bin/sh -c "cd /code/frontend && yarn dev"
        networks:
            - app_network
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:3000/"]
            interval: 5s
            timeout: 5s
            retries: 20

networks:
    app_network:
        driver: bridge

volumes:
    postgres_data:
    frontend_node_modules:
